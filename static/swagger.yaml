swagger: '2.0'
info:
  title: "Ecommerce API"
  description: "API that includes resources to manage an ecommerce website"
  version: "1.0.0"
host: "127.0.0.1:5000" #working on local host
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
#routes
paths: 
#Login Path
  /customers/login: #specific URL endpoint
    post: #what kind of request you're sending
      tags:
        - Customer # creates a category for this route that can be reused on like routes
      summary: "Login endpoint (generates a token)"
      description: "Endpoint for user authentication and token generation."
      security: 
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "credentials for login (email and password)"
          required: true
          schema: 
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: '#/definitions/LoginResponse'
          examples:
            application/json:
              message: "successfully logging in"
              status: "success"
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              
#GetAllCustomers Path
  /customers:
    get:
      tags:
        - Customer
      summary: "Retrieve a list of customer objects"
      description: "Endpont to retrieve all customers, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved all customers"
          schema:
            $ref: "#/definitions/GetCustomersResponse"
          examples:
            application/json:
              name: "John Smith"
              email: "jsmith@email.com"
              phone: "1234567890"
              username: "jsmith"
              admin: 0
              
              
    post:
      tags:
        - Customer
      summary: "Create a customer object"
      description: "Endpoint to create a customer in the e-commerce system"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer object"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        200:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              {
        "customer_id": 5,
        "id": 4,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 1,
                "price": 399.99,
                "product_name": "PS5"
            },
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            },
            {
                "id": 4,
                "price": 2499.99,
                "product_name": "Google Goggles"
            }
        ]
    }
              
              
# adding items to the cart
  /customers/add-item: #go here to add an item to the cart. You will need to be logged in.
    post:
      tags:
        - Cart
      summary: "Add a product to the customer's cart"
      description: "Endpoint to add a product to the customer's cart"
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Cart object"
          required: true
          schema:
            $ref: "#/definitions/AddToCartPayload"
      responses:
        200:
          description: "Adding item to cart"
          schema:
            $ref: "#/definitions/AddToCartResponse"
          examples:
            application/json:
              message: "item added to cart"
              status: "success"

  /customers/remove-item:
    post:
      tags:
        - Cart
      summary: "Remove a product(s) from the customer's cart"
      description: "Endpoint to remove product(s) from the customer's cart"
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Cart object"
          required: true
          schema:
            $ref: "#/definitions/RemoveItemFromCartPayload"
      responses:
        200:
          description: "Removing item from cart"
          schema:
            $ref: "#/definitions/RemoveItemFromCartResponse"
          examples:
            application/json:
              message: "item removed from cart"
              status: "success"

  /customers/view-cart:
    post:
      tags:
        - Cart
      summary: "View all products in the customer's cart"
      description: "Endpoint to view all products in the customer's cart"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Cart contents retrieved"
          schema:
            $ref: "#/definitions/ViewCartResponse"
          examples:
            application/json:
              [
                  "Laptop",
                  "Desktop Computer"
              ]

  /customers/empty-cart:
    post:
      tags:
        - Cart
      summary: "Remove all products from the customer's cart"
      description: "Endpoint to empty the customer's cart"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Cart has been emptied"
          schema:
            $ref: "#/definitions/EmptyCartReponse"
          examples:
            application/json:
              message: "Cart emptied"
              status: "success"

  /customers/place-order:
    post:
      tags:
        - Cart
      summary: "Place an order with the products in the customer's cart"
      description: "Endpoint to place an order with the products in the customer's cart"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Order placed successfully"
          schema:
            $ref: "#/definitions/PlaceOrderResponse"
          examples:
            application/json:
              message: "Order placed successfully"
              status: "success"

#GetAllProducts Path
  /products:
    get:
      tags:
        - Product
      summary: "Retrieve a list of product objects"
      description: "Endpont to retrieve all products, requires token authentication"
      responses:
        200:
          description: "Successfully retrieved all products"
          schema:
            $ref: "#/definitions/GetProductsResponse"
          examples:
            application/json:
              [
    {
        "id": 1,
        "price": 399.99,
        "product_name": "PS5"
    },
    {
        "id": 2,
        "price": 299.99,
        "product_name": "Xbox"
    },
    {
        "id": 3,
        "price": 1299.99,
        "product_name": "Apple Watch"
    },
    {
        "id": 4,
        "price": 2499.99,
        "product_name": "Google Goggles"
    },
    {
        "id": 5,
        "price": 1199.99,
        "product_name": "iPhone 15"
    },
    {
        "id": 6,
        "price": 1399.99,
        "product_name": "Laptop"
    },
    {
        "id": 7,
        "price": 699.99,
        "product_name": "Samsung TV"
    },
    {
        "id": 8,
        "price": 1599.98,
        "product_name": "Desktop Computer"
    },
    {
        "id": 9,
        "price": 299.99,
        "product_name": "Remote controlled car"
    },
    {
        "id": 10,
        "price": 29.99,
        "product_name": "DVD Player"
    }
]
    post:
      tags:
        - Product
      summary: "Create a product object in our e-commerce system"
      description: "Endpoint to create a product object"
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Product object"
          required: true
          schema:
            $ref: "#/definitions/CreateProductPayload"
      responses:
        200:
          description: "Product created successfully"
          schema:
            $ref: "#/definitions/CreateProductResponse"
          examples:
            application/json:
              message: "product added"
              status: "success"
                        
#GetAllOrders Path
  /orders:
    get:
      tags:
        - Order
      summary: "Retrieve a list of order objects"
      description: "Endpont to retrieve all orders, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved all orders"
          schema:
            $ref: "#/definitions/GetOrdersResponse"
          examples:
            application/json:
              [
    {
        "customer_id": 1,
        "id": 1,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 1,
                "price": 399.99,
                "product_name": "PS5"
            },
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            }
        ]
    },
    {
        "customer_id": 3,
        "id": 3,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            }
        ]
    },
    {
        "customer_id": 5,
        "id": 4,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 1,
                "price": 399.99,
                "product_name": "PS5"
            },
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            },
            {
                "id": 4,
                "price": 2499.99,
                "product_name": "Google Goggles"
            }
        ]
    },
    {
        "customer_id": 2,
        "id": 5,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 7,
                "price": 699.99,
                "product_name": "Samsung TV"
            },
            {
                "id": 8,
                "price": 1599.98,
                "product_name": "Desktop Computer"
            },
            {
                "id": 10,
                "price": 29.99,
                "product_name": "DVD Player"
            }
        ]
    },
    {
        "customer_id": 4,
        "id": 6,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            },
            {
                "id": 7,
                "price": 699.99,
                "product_name": "Samsung TV"
            },
            {
                "id": 9,
                "price": 299.99,
                "product_name": "Remote controlled car"
            }
        ]
    },
    {
        "customer_id": 5,
        "id": 7,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            },
            {
                "id": 3,
                "price": 1299.99,
                "product_name": "Apple Watch"
            },
            {
                "id": 7,
                "price": 699.99,
                "product_name": "Samsung TV"
            },
            {
                "id": 9,
                "price": 299.99,
                "product_name": "Remote controlled car"
            }
        ]
    },
    {
        "customer_id": 2,
        "id": 8,
        "order_date": "2024-09-04",
        "products": [
            {
                "id": 1,
                "price": 399.99,
                "product_name": "PS5"
            },
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            },
            {
                "id": 5,
                "price": 1199.99,
                "product_name": "iPhone 15"
            },
            {
                "id": 7,
                "price": 699.99,
                "product_name": "Samsung TV"
            },
            {
                "id": 9,
                "price": 299.99,
                "product_name": "Remote controlled car"
            }
        ]
    },
    {
        "customer_id": 3,
        "id": 9,
        "order_date": "2024-09-14",
        "products": [
            {
                "id": 1,
                "price": 399.99,
                "product_name": "PS5"
            },
            {
                "id": 4,
                "price": 2499.99,
                "product_name": "Google Goggles"
            },
            {
                "id": 5,
                "price": 1199.99,
                "product_name": "iPhone 15"
            },
            {
                "id": 8,
                "price": 1599.98,
                "product_name": "Desktop Computer"
            }
        ]
    }
]
              
  /orders/<int:order_id>:
    get:
      tags:
        - Order
      summary: "Retrieve a specific order by order id"
      description: "Endpoint to retrieve a specific order, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved order"
          schema:
            $ref: "#/definitions/GetOrdersResponse"
          examples:
            application/json:
              {
    "customer_id": 2,
    "id": 8,
    "order_date": "2024-09-04",
    "products": [
        {
            "id": 1,
            "price": 399.99,
            "product_name": "PS5"
        },
        {
            "id": 2,
            "price": 299.99,
            "product_name": "Xbox"
        },
        {
            "id": 5,
            "price": 1199.99,
            "product_name": "iPhone 15"
        },
        {
            "id": 7,
            "price": 699.99,
            "product_name": "Samsung TV"
        },
        {
            "id": 9,
            "price": 299.99,
            "product_name": "Remote controlled car"
        }
    ]
}
              
  /orders/customer/<int:customer_id>:
    get:
      tags:
        - Order
      summary: "Retrieve a specific order by customer id"
      description: "Endpoint to retrieve a specific order, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved order"
          schema:
            $ref: "#/definitions/GetOrdersResponse"
          examples:
            application/json:
              [
    {
        "customer_id": 5,
        "id": 4,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 1,
                "price": 399.99,
                "product_name": "PS5"
            },
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            },
            {
                "id": 4,
                "price": 2499.99,
                "product_name": "Google Goggles"
            }
        ]
    },
    {
        "customer_id": 5,
        "id": 7,
        "order_date": "2024-09-03",
        "products": [
            {
                "id": 2,
                "price": 299.99,
                "product_name": "Xbox"
            },
            {
                "id": 3,
                "price": 1299.99,
                "product_name": "Apple Watch"
            },
            {
                "id": 7,
                "price": 699.99,
                "product_name": "Samsung TV"
            },
            {
                "id": 9,
                "price": 299.99,
                "product_name": "Remote controlled car"
            }
        ]
    }
]
              
 
#Payloads and Responses
definitions: 
#Login Definitions
  LoginPayload:
    type: "object" #sending a JSON object
    properties: 
      email:
        type: "string"
        description: "email"
      password:
        type: "string"
        description: "password"
    required:
      - "email"
      - "password"

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
        description: "Authentication token on successful login"
      message:
        type: "string"
        description: "Message indicating success or failure"
      status:
        type: "string"
        description: "Status of operation"
    required:
      - "message"
      - "status"

#Get all customers Definitions

  GetCustomersResponse:
    type: "object"
    properties:
      name: 
        type: "string"
        example: "Franklin Stanklin"
      phone:
        type: "string"
        example: "444-555-4343"
      email:
        type: "string"
        example: "frank@stank.com"
      password:
        type: "string"
        example: "Stanky1"
      username:
        type: "string"
        example: "Frank2"
      admin:
        type: "integer"
        description: "Admin permission"
        example: 0
        
  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Franklin Stanklin"
      phone:
        type: "string"
        example: "111-111-1111"
      email:
        type: "string"
        example: "frank@stank.com"
      password:
        type: "string"
        example: "Stanky1"
      username:
        type: "string"
        example: "Frank2"
      admin:
        type: "integer"
        example: 0
    required:
      - name
      - phone
      - email
      - password
      - username
      - admin

  CreateCustomerResponse:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Franklin Stanklin"
      phone:
        type: "string"
        example: "111-111-1111"
      email:
        type: "string"
        example: "frank@stank.com"
      password:
        type: "string"
        example: "Stanky1"
      username:
        type: "string"
        example: "Frank2"
      admin:
        type: "integer"
        example: 0


  GetProductsResponse:
    type: "object"
    properties:
      name: 
        type: "string"
        example: "PS5"
      price: 
        type: "integer"
        example: 450
        

  CreateProductPayload:
    type: "object"
    properties:
      price:
        type: "number"
        format: "float"
        description: "Price of the product"
      product_name:
        type: "string"
        example: "iPhone 15"
    required:
      - price
      - product_name
  

  CreateProductResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        example: "3"
      price:
        type: "number"
        format: "float"
        example: "950"
      product_name:
        type: "string"
        example: "iPhone 14 Pro"

  GetOrdersResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Order ID"
      customer_id:
        type: "integer"
        description: "ID of the customer"
      order_date:
        type: "object"
        description: "Date and time when the order was placed"
      products:
        type: "array"
        description: "List of products in the order"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
              description: "Product ID"
            product_name:
              type: "string"
              description: "Name of the product"
            price:
              type: "number"
              description: "Product price"

  AddToCartPayload:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        example: "1"
      product_id:
        type: "integer"
        example: "1"
    required:
      - customer_id
      - product_id

  AddToCartResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "products added to cart"

  RemoveItemFromCartPayload:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        example: "1"
      product_ids:
        type: "object"
        example: "[1, 2, 3]"
    required:
      - customer_id
      - product_ids


  RemoveItemFromCartResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Product removed from cart"

  ViewCartResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        description: "ID of the customer"
      products:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
              description: "Product ID"
            price:
              type: "number"
              format: "float"
              description: "Product price"
            product_name:
              type: "string"
              description: "Name of the product"

  EmptyCartReponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: "cart has been emptied"

  PlaceOrderResponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Order placed succesfully"
      order_date:
        type: "object"
        example: "Tue, 10 Sep 2024 00:00:00 GMT"
      order_id:
        type: "integer"
        example: "13"

      


      